
import datetime
import sqlalchemy.orm as orm
from pandas import DataFrame

import pylib.library.sql.database as db


class QuerierTrade:
    def __init__(self):
        pass

    @staticmethod
    def get_trade_from_book(
            trade_id: int,
            session: orm.session.Session
    ):
        _query_filter = [
            db.TradingBook.trade_id == trade_id
        ]
        _query = session.query(db.TradingBook).filter(*_query_filter)
        result = DataFrame()
        for row in _query:
            result.loc[-1] = row  # adding a row
            result.index = result.index + 1  # shifting index
            result = result.sort_index()  # sorting by index
        return result

    @staticmethod
    def add_trade_to_book(
            new_trade_dict: dict,
            session: orm.session.Session
    ):
        _query = session.query(db.TradingBook).filter()
        new_record = db.TradingBook(
            trade_id=new_trade_dict["trade_id"],
            instrument_id=new_trade_dict["instrument_id"],
            trade_date=new_trade_dict["trade_date"],
            settlement_date=new_trade_dict["settlement_date"],
            transaction_type=new_trade_dict["transaction_type"],
            asset_class=new_trade_dict["asset_class"],
            symbol=new_trade_dict["symbol"],
            description=new_trade_dict["description"],
            market=new_trade_dict["market"],
            quantity=new_trade_dict["quantity"],
            price=new_trade_dict["price"],
            price_currency=new_trade_dict["price_currency"],
            commission_paid=new_trade_dict["commission_paid"],
            settlement_amount=new_trade_dict["settlement_amount"],
            trade_base_currency=new_trade_dict["trade_currency"],
            portfolio=new_trade_dict["portfolio"]
        )
        session.add(new_record)

    @staticmethod
    def get_last_trade_id(
            session: orm.session.Session
    ):
        _query = session.query(db.TradingBook.trade_id).all()
        return max([_trade_id for _trade_id in _query])

    # def generate_new_trade_number(self):
    #     _max_trade_number = 0
    # the trade number should be generated by Trade class method
